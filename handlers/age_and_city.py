from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from states import Form
import json
import logging
from typing import Optional, Dict, Any

router = Router()
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
PROFILES_CACHE: Dict[str, Any] = {}

async def load_profile(user_id: int) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        if str(user_id) in PROFILES_CACHE:
            return PROFILES_CACHE[str(user_id)]
            
        with open("user_profiles.json", "r", encoding="utf-8") as file:
            data = json.load(file)
            PROFILES_CACHE[str(user_id)] = data.get(str(user_id), {})
            return PROFILES_CACHE[str(user_id)]
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return {}
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {}

def save_profile(user_id: int, data: Dict[str, Any]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        PROFILES_CACHE[str(user_id)] = data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
        try:
            with open("user_profiles.json", "r", encoding="utf-8") as file:
                profiles = json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            profiles = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profiles[str(user_id)] = data

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open("user_profiles.json", "w", encoding="utf-8") as file:
            json.dump(profiles, file, ensure_ascii=False, indent=4)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False

def get_city_keyboard(city: Optional[str] = None) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    if city:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=city)],
                [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_age_keyboard(age: Optional[int] = None) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if age is not None:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(age))]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    return ReplyKeyboardRemove()

async def ask_age(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await load_profile(message.from_user.id)
    age = user_data.get("age")
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 12 –¥–æ 99 –ª–µ—Ç):",
        reply_markup=get_age_keyboard(age)
    )
    await state.set_state(Form.age)

@router.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç"""
    user_data = await load_profile(message.from_user.id)
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    if user_data.get("age") and message.text == str(user_data["age"]):
        await ask_city(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    if not message.text.isdigit():
        await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return
        
    age = int(message.text)
    
    if age < 12:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç - 12 –ª–µ—Ç.")
        return
    elif age > 99:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç - 99 –ª–µ—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    user_data["age"] = age
    if not save_profile(user_id, user_data):
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await ask_city(message, state)

async def ask_city(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await load_profile(message.from_user.id)
    city = user_data.get("city")
    
    await message.answer(
        "üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?",
        reply_markup=get_city_keyboard(city)
    )
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"""
    user_data = await load_profile(message.from_user.id)
    user_id = message.from_user.id
    city = message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    if city.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data["city"] = "–ù–µ —É–∫–∞–∑–∞–Ω"
        if not save_profile(user_id, user_data):
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
            return
    else:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
        if len(city) < 2:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.")
            return
        if len(city) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.")
            return
            
        user_data["city"] = city
        if not save_profile(user_id, user_data):
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")
            return

    await ask_description(message, state)

async def ask_description(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –æ–ø–∏—Å–∞–Ω–∏—è"""
    await message.answer(
        "‚úèÔ∏è –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.description)
